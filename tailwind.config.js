/** @type {import('tailwindcss').Config} */
const withOpacityValue = (variable) => ({ opacityValue }) => {
  if (opacityValue !== undefined) {
    return `rgb(var(${variable}) / ${opacityValue})`
  }

  return `rgb(var(${variable}) / 1)`
}

export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  darkMode: 'class',
  theme: {
    extend: {
      colors: {
        primary: {
          50: withOpacityValue('--color-primary-50'),
          100: withOpacityValue('--color-primary-100'),
          200: withOpacityValue('--color-primary-200'),
          300: withOpacityValue('--color-primary-300'),
          400: withOpacityValue('--color-primary-400'),
          500: withOpacityValue('--color-primary-500'),
          600: withOpacityValue('--color-primary-600'),
          700: withOpacityValue('--color-primary-700'),
          800: withOpacityValue('--color-primary-800'),
          900: withOpacityValue('--color-primary-900'),
          950: withOpacityValue('--color-primary-950'),
        },
        neutral: {
          50: withOpacityValue('--color-neutral-50'),
          100: withOpacityValue('--color-neutral-100'),
          200: withOpacityValue('--color-neutral-200'),
          300: withOpacityValue('--color-neutral-300'),
          400: withOpacityValue('--color-neutral-400'),
          500: withOpacityValue('--color-neutral-500'),
          600: withOpacityValue('--color-neutral-600'),
          700: withOpacityValue('--color-neutral-700'),
          800: withOpacityValue('--color-neutral-800'),
          900: withOpacityValue('--color-neutral-900'),
          950: withOpacityValue('--color-neutral-950'),
        },
        background: withOpacityValue('--color-background'),
        surface: withOpacityValue('--color-surface'),
        'surface-elevated': withOpacityValue('--color-surface-elevated'),
        foreground: withOpacityValue('--color-text-primary'),
        muted: withOpacityValue('--color-text-secondary'),
        subtle: withOpacityValue('--color-text-tertiary'),
        inverse: withOpacityValue('--color-text-inverse'),
        border: withOpacityValue('--color-border-default'),
        'border-subtle': withOpacityValue('--color-border-subtle'),
        'border-strong': withOpacityValue('--color-border-strong'),
      },
      spacing: {
        '3xs': 'var(--space-3xs)',
        '2xs': 'var(--space-2xs)',
        xs: 'var(--space-xs)',
        sm: 'var(--space-sm)',
        md: 'var(--space-md)',
        lg: 'var(--space-lg)',
        xl: 'var(--space-xl)',
        '2xl': 'var(--space-2xl)',
        '3xl': 'var(--space-3xl)',
      },
      borderRadius: {
        sm: 'var(--radius-sm)',
        DEFAULT: 'var(--radius-md)',
        md: 'var(--radius-md)',
        lg: 'var(--radius-lg)',
        xl: 'var(--radius-xl)',
        '2xl': 'var(--radius-2xl)',
        '3xl': 'var(--radius-3xl)',
        full: '9999px',
      },
      boxShadow: {
        sm: 'var(--shadow-sm)',
        DEFAULT: 'var(--shadow-md)',
        md: 'var(--shadow-md)',
        lg: 'var(--shadow-lg)',
        xl: 'var(--shadow-xl)',
        '2xl': 'var(--shadow-2xl)',
      },
      fontFamily: {
        sans: [
          'var(--font-sans, "Inter", "Segoe UI", system-ui, sans-serif)',
          'system-ui',
          '-apple-system',
          'BlinkMacSystemFont',
          '"Segoe UI"',
          'Roboto',
          '"Helvetica Neue"',
          'Arial',
          '"Noto Sans"',
          'sans-serif',
          '"Apple Color Emoji"',
          '"Segoe UI Emoji"',
          '"Segoe UI Symbol"',
          '"Noto Color Emoji"',
        ],
        heading: [
          'var(--font-heading, "Inter", "Segoe UI", system-ui, sans-serif)',
          'var(--font-sans, "Inter", "Segoe UI", system-ui, sans-serif)',
          'system-ui',
          '-apple-system',
          'BlinkMacSystemFont',
          '"Segoe UI"',
          'Roboto',
          '"Helvetica Neue"',
          'Arial',
          '"Noto Sans"',
        ],
        mono: [
          'var(--font-mono, "JetBrains Mono", "SFMono-Regular", Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace)',
          'monospace',
        ],
      },
      fontSize: {
        xs: ['0.75rem', { lineHeight: '1.1', letterSpacing: '0.02em' }],
        sm: ['0.875rem', { lineHeight: '1.4', letterSpacing: '0' }],
        base: ['1rem', { lineHeight: '1.5', letterSpacing: '0' }],
        lg: ['1.125rem', { lineHeight: '1.6', letterSpacing: '-0.005em' }],
        xl: ['1.25rem', { lineHeight: '1.6', letterSpacing: '-0.01em' }],
        '2xl': ['1.5rem', { lineHeight: '1.55', letterSpacing: '-0.015em' }],
        '3xl': ['1.875rem', { lineHeight: '1.4', letterSpacing: '-0.02em' }],
        '4xl': ['2.25rem', { lineHeight: '1.3', letterSpacing: '-0.02em' }],
        '5xl': ['3rem', { lineHeight: '1.15', letterSpacing: '-0.02em' }],
        '6xl': ['3.75rem', { lineHeight: '1.1', letterSpacing: '-0.025em' }],
      },
      fontWeight: {
        normal: '400',
        medium: '500',
        semibold: '600',
        bold: '700',
        extrabold: '800',
      },
      lineHeight: {
        tight: 'var(--line-height-tight)',
        snug: 'var(--line-height-snug)',
        normal: 'var(--line-height-normal)',
        relaxed: 'var(--line-height-relaxed)',
        loose: 'var(--line-height-loose)',
      },
      transitionDuration: {
        none: '0ms',
        short: 'var(--transition-duration-short)',
        DEFAULT: 'var(--transition-duration-base)',
        base: 'var(--transition-duration-base)',
        long: 'var(--transition-duration-long)',
        'extra-long': 'var(--transition-duration-extra-long)',
      },
      transitionTimingFunction: {
        DEFAULT: 'var(--transition-easing-standard)',
        standard: 'var(--transition-easing-standard)',
        emphasized: 'var(--transition-easing-emphasized)',
        decelerated: 'var(--transition-easing-decelerated)',
        accelerated: 'var(--transition-easing-accelerated)',
      },
    },
  },
  plugins: [],
}
